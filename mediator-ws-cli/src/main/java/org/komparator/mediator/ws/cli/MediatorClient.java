package org.komparator.mediator.ws.cli;

import static javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY;

import java.net.SocketTimeoutException;
import java.net.ConnectException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.xml.ws.*;

import javax.xml.ws.BindingProvider;
import java.lang.InterruptedException;

import org.komparator.mediator.ws.*;
import pt.ulisboa.tecnico.sdis.ws.uddi.UDDINaming;
import java.net.NetworkInterface;
import java.net.InetAddress;
import java.util.Date;
import java.util.UUID;
import org.komparator.security.handler.IdOPerationSender;



/**
 * Client.
 *
 * Adds easier endpoint address configuration and 
 * UDDI lookup capability to the PortType generated by wsimport.
 */
public class MediatorClient implements MediatorPortType {


     /** WS service */
    MediatorService service = null;


     /** WS port (port type is the interface, port is the implementation) */
     MediatorPortType port = null;

    /** UDDI server URL */
    private String uddiURL = null;

    private String id=null;
    private int operation=1; 
    private static final int N_TRIES = 3; //Number of Tries Until Failure
    public static final int INTERVAL = 5; // LifeProof Update Interval
    public static final int MAX_TIME = 1; //tempo maximo para a mensagem chegar ao receptor

    private static final int SECONDS = INTERVAL*2+MAX_TIME;
    private static final int RECEIVE_TIMEOUT =MAX_TIME*2000;
    private static final int CONNECTION_TIMEOUT = MAX_TIME*1000;


    /** WS name */
    private String wsName = null;

    /** WS endpoint address */
    private String wsURL = null; // default value is defined inside WSDL

    public String getWsURL() {
        return wsURL;
    }

    /** output option **/
    private boolean verbose = false;

    public boolean isVerbose() {
        return verbose;
    }

    public void setVerbose(boolean verbose) {
        this.verbose = verbose;
    }

    /** constructor with provided web service URL */
    public MediatorClient(String wsURL) throws MediatorClientException {
        this.wsURL = wsURL;
        createStub();
    }

    /** constructor with provided UDDI location and name */
    public MediatorClient(String uddiURL, String wsName) throws MediatorClientException {
        this.uddiURL = uddiURL;
        this.wsName = wsName;
        uddiLookup();
        createStub();
    }

    /** UDDI lookup */
    private void uddiLookup() throws MediatorClientException {
        try {
            if (verbose)
                System.out.printf("Contacting UDDI at %s%n", uddiURL);
            UDDINaming uddiNaming = new UDDINaming(uddiURL);

            if (verbose)
                System.out.printf("Looking for '%s'%n", wsName);
            wsURL = uddiNaming.lookup(wsName);

        } catch (Exception e) {
            String msg = String.format("Client failed lookup on UDDI at %s!",
                    uddiURL);
            throw new MediatorClientException(msg, e);
        }

        if (wsURL == null) {
            String msg = String.format(
                    "Service with name %s not found on UDDI at %s", wsName,
                    uddiURL);
            throw new MediatorClientException(msg);
        }
    }

    /** Stub creation and configuration */
    private void createStub() {
        if (verbose)
            System.out.println("Creating stub ...");
             service = new MediatorService();
            port = service.getMediatorPort();
            BindingProvider bindingProvider = (BindingProvider) port;
            Map<String, Object> requestContext = bindingProvider.getRequestContext();
        if (wsURL != null) {
            if (verbose)
                System.out.println("Setting endpoint address ...");
                requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
                final List<String> CONN_TIME_PROPS = new ArrayList<String>();
                    CONN_TIME_PROPS.add("com.sun.xml.ws.connect.timeout");
                    CONN_TIME_PROPS.add("com.sun.xml.internal.ws.connect.timeout");
                    CONN_TIME_PROPS.add("javax.xml.ws.client.connectionTimeout");
            for (String propName : CONN_TIME_PROPS)
                requestContext.put(propName, CONNECTION_TIMEOUT);
                final List<String> RECV_TIME_PROPS = new ArrayList<String>();
                    RECV_TIME_PROPS.add("com.sun.xml.ws.request.timeout");
                    RECV_TIME_PROPS.add("com.sun.xml.internal.ws.request.timeout");
                    RECV_TIME_PROPS.add("javax.xml.ws.client.receiveTimeout");
            for (String propName : RECV_TIME_PROPS)
                requestContext.put(propName, RECEIVE_TIMEOUT);
        }
        if(wsName!=null){
        try{
            InetAddress ip = InetAddress.getLocalHost();
            NetworkInterface network = NetworkInterface.getByInetAddress(ip);
            byte[] mac = network.getNetworkInterfaces().nextElement().getHardwareAddress();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < mac.length; i++) {
                sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? "-" : ""));
            }
        id=sb.toString()+"."+ new Date().hashCode()+"."+UUID.randomUUID().toString();
        }catch(java.net.SocketException x){
            System.out.println("Failed to get MAC address");
            id= new Date().hashCode()+"."+UUID.randomUUID().toString();
        }catch(java.net.UnknownHostException e){
            System.out.println("Failed to get MAC address");
            id= new Date().hashCode()+"."+UUID.randomUUID().toString();
        }
        requestContext.put(IdOPerationSender.REQUEST_PROPERTY,id);
        System.out.println("ID from client:" + id);
    }
        
    }

    private void updateStub() throws MediatorClientException{
        try {
            uddiLookup();
        } catch (Exception e) {
            String msg = String.format("Client failed lookup on UDDI at %s!",
                    uddiURL);
            throw new MediatorClientException(msg, e);
        }
        if (wsURL == null) {
            String msg = String.format(
                    "Service with name %s not found on UDDI at %s", wsName,
                    uddiURL);
            throw new MediatorClientException(msg);
        }
        BindingProvider bindingProvider = (BindingProvider) port;
        Map<String, Object> requestContext = bindingProvider.getRequestContext();
        requestContext.put(ENDPOINT_ADDRESS_PROPERTY, wsURL);
    }


    // remote invocation methods ----------------------------------------------
    

    
     @Override
	public void clear() {
        if(wsName==null){
            port.clear();
            return;
        }
        try {
         port.clear();
        } catch(WebServiceException wse) {
            Throwable cause = wse.getCause();
            if (cause != null && (cause instanceof ConnectException || cause instanceof SocketTimeoutException)) {
                try {
                Thread.sleep(SECONDS*1000);
                updateStub();
                } catch(MediatorClientException e) {
                    System.out.println(e);
               }catch (InterruptedException x){
                }
                int n = 0;
                while(n<N_TRIES){
                n++;
                try{
                    port.clear();
                return;
                } catch(WebServiceException x) {
                    Throwable cause2 = x.getCause();
                        if (cause2 != null && (cause2 instanceof ConnectException || cause2 instanceof SocketTimeoutException)) {
                            try {
                                Thread.sleep(SECONDS*1000);
                                updateStub();
                                continue;

                            } catch(MediatorClientException mcx) {
                                System.out.println(mcx);
                                break;
                            }catch (InterruptedException ix){
                            }
                        }else throw wse;
                    }
        }
        System.out.println("Servers are unavailable, please try again later...");
        }else 
            throw wse;
        }
        return;
    }

     @Override
	public String ping(String arg0) {
        String msg="Ping Failed";
        if(arg0.equals("kill"))
            try{
            return port.ping(arg0); //Kills the server
            }catch (Exception ix){
             return null;   }
        
        try {
         return port.ping(arg0);
        } catch(WebServiceException wse) {
            Throwable cause = wse.getCause();
            if (cause != null && (cause instanceof ConnectException || cause instanceof SocketTimeoutException)) {
                try {
                Thread.sleep(SECONDS*1000);
                updateStub();
                } catch(MediatorClientException e) {
                    System.out.println(e);
               }catch (InterruptedException x){
                }
                int n = 0;
                while(n<N_TRIES){
                n++;
                try{
                return port.ping(arg0);
                
                    
                } catch(WebServiceException x) {
                    Throwable cause2 = x.getCause();
                    if (cause2 != null && (cause2 instanceof ConnectException || cause2 instanceof SocketTimeoutException)) {
                            try {
                                Thread.sleep(SECONDS*1000);
                                updateStub();
                                continue;

                            } catch(MediatorClientException mcx) {
                                System.out.println(mcx);
                                break;
                            }catch (InterruptedException ix){
                            }
                        }else throw wse;
                    }
        }
        System.out.println("Servers are unavailable, please try again later...");
        }else throw wse;
    }
        return msg;
    }
	 

     @Override
	public List<ItemView> searchItems(String descText) throws InvalidText_Exception {
        try {
         return port.searchItems(descText);
        } catch(WebServiceException wse) {
            Throwable cause = wse.getCause();
            if (cause != null  && (cause instanceof ConnectException || cause instanceof SocketTimeoutException)) {
                try {
                Thread.sleep(SECONDS*1000);
                updateStub();
                } catch(MediatorClientException e) {
                    System.out.println(e);
               }catch (InterruptedException x){
                }
                int n = 0;
                while(n<N_TRIES){
                n++;
                try{
                return port.searchItems(descText);
                
                    
                } catch(WebServiceException x) {
                    Throwable cause2 = x.getCause();
                        if (cause2 != null && (cause2 instanceof ConnectException || cause2 instanceof SocketTimeoutException)) {
                            try {
                                Thread.sleep(SECONDS*1000);
                                updateStub();
                                continue;

                            } catch(MediatorClientException mcx) {
                                System.out.println(mcx);
                                break;
                            }catch (InterruptedException ix){
                            }
                        }else throw wse;
                    }
        }
        System.out.println("Servers are unavailable, please try again later...");
        }else throw wse;
    }
        return null;
    }
	 

    @Override
	public List<CartView> listCarts() {
        try {
         return port.listCarts();
        } catch(WebServiceException wse) {
            Throwable cause = wse.getCause();
            if (cause != null  && (cause instanceof ConnectException || cause instanceof SocketTimeoutException)) {
                try {
                Thread.sleep(SECONDS*1000);
                updateStub();
                } catch(MediatorClientException e) {
                    System.out.println(e);
               }catch (InterruptedException x){
                }
                int n = 0;
                while(n<N_TRIES){
                n++;
                try{
                return port.listCarts();
                
                    
                } catch(WebServiceException x) {
                    Throwable cause2 = x.getCause();
                        if (cause2 != null && (cause2 instanceof ConnectException || cause2 instanceof SocketTimeoutException)) {
                            try {
                                Thread.sleep(SECONDS*1000);
                                updateStub();
                                continue;

                            } catch(MediatorClientException mcx) {
                                System.out.println(mcx);
                                break;
                            }catch (InterruptedException ix){
                            }
                        }else throw wse;
                    }
        }
        System.out.println("Servers are unavailable, please try again later...");
        }else throw wse;
    }
        return null;
    }

	@Override
	public List<ItemView> getItems(String productId) throws InvalidItemId_Exception {
        try {
         return port.getItems(productId);
        } catch(WebServiceException wse) {
            Throwable cause = wse.getCause();
            if (cause != null  && (cause instanceof ConnectException || cause instanceof SocketTimeoutException)) {
                try {
                Thread.sleep(SECONDS*1000);
                updateStub();
                } catch(MediatorClientException e) {
                    System.out.println(e);
               }catch (InterruptedException x){
                }
                int n = 0;
                while(n<N_TRIES){
                n++;
                try{
                return port.getItems(productId);
                } catch(WebServiceException x) {
                    Throwable cause2 = x.getCause();
                        if (cause2 != null && (cause2 instanceof ConnectException || cause2 instanceof SocketTimeoutException)) {
                            try {
                                Thread.sleep(SECONDS*1000);
                                updateStub();
                                continue;

                            } catch(MediatorClientException mcx) {
                                System.out.println(mcx);
                                break;
                            }catch (InterruptedException ix){
                            }
                        }else throw wse;
                    }
        }System.out.println("Servers are unavailable, please try again later...");
        }else throw wse;
    }
        return null;
    }

	 @Override
	 public ShoppingResultView buyCart(String cartId, String creditCardNr)
			 throws EmptyCart_Exception, InvalidCartId_Exception, InvalidCreditCard_Exception { // adicionar um token no wsdl
         try {
        BindingProvider bindingProvider = (BindingProvider) port;
        Map<String, Object> requestContext = bindingProvider.getRequestContext();
        requestContext.put(IdOPerationSender.REQUEST_PROPERTY2,operation);
        operation++;
         return port.buyCart(cartId,creditCardNr);
        } catch(WebServiceException wse) {
            Throwable cause = wse.getCause();
            if (cause != null  && (cause instanceof ConnectException || cause instanceof SocketTimeoutException)) {
                try {
                Thread.sleep(SECONDS*1000);
                updateStub();
                } catch(MediatorClientException mcx) {
                    System.out.println(mcx);
               }catch (InterruptedException x){
                }
            
                int n = 0;
                while(n<N_TRIES){
                n++;
                try{
                return port.buyCart(cartId,creditCardNr);
                } catch(WebServiceException x) {
                    Throwable cause2 = x.getCause();
                        if (cause2 != null && (cause2 instanceof ConnectException || cause2 instanceof SocketTimeoutException)) {
                            try {
                                Thread.sleep(SECONDS*1000);
                                updateStub();
                                continue;

                            } catch(MediatorClientException mcx) {
                                System.out.println(mcx);
                                break;
                            }catch (InterruptedException ix){
                            }
                        }else throw wse;
                    }
        }System.out.println("Servers are unavailable, please try again later...");
        }else throw wse;
    }
        return null;
    }


	 @Override
	 public void addToCart(String cartId, ItemIdView itemId, int itemQty) throws InvalidCartId_Exception,
			 InvalidItemId_Exception, InvalidQuantity_Exception, NotEnoughItems_Exception { // adicionar um token no wsdl
        try {
        BindingProvider bindingProvider = (BindingProvider) port;
        Map<String, Object> requestContext = bindingProvider.getRequestContext();
        requestContext.put(IdOPerationSender.REQUEST_PROPERTY2,operation);
        operation++;
          port.addToCart(cartId,itemId,itemQty);
          return;
        } catch(WebServiceException wse) {
            Throwable cause = wse.getCause();
            if (cause != null  && (cause instanceof ConnectException || cause instanceof SocketTimeoutException)) {
                try {
                Thread.sleep(SECONDS*1000);
                updateStub();
                } catch(MediatorClientException e) {
                    System.out.println(e);
               }catch (InterruptedException x){
                }
                int n = 0;
                while(n<N_TRIES){
                n++;
                try{
                port.addToCart(cartId,itemId,itemQty);
                return;
                } catch(WebServiceException x) {
                    Throwable cause2 = x.getCause();
                        if (cause2 != null && (cause2 instanceof ConnectException || cause2 instanceof SocketTimeoutException)) {

                            try {
                                Thread.sleep(SECONDS*1000);
                                updateStub();
                                continue;

                            } catch(MediatorClientException mcx) {
                                System.out.println(mcx);
                                break;
                            }catch (InterruptedException ix){
                            }
                        }else throw wse;
                    }
        }System.out.println("Servers are unavailable, please try again later...");
        }else throw wse;
    }
        return;
    }

	 @Override
	 public List<ShoppingResultView> shopHistory() {
        try {
         return port.shopHistory();
        } catch(WebServiceException wse) {
            Throwable cause = wse.getCause();
            if (cause != null  && (cause instanceof ConnectException || cause instanceof SocketTimeoutException)) {
                try {
                Thread.sleep(SECONDS*1000);
                updateStub();
                } catch(MediatorClientException e) {
                    System.out.println(e);
               }catch (InterruptedException x){
                }
                int n = 0;
                while(n<N_TRIES){
                n++;
                try{
                return port.shopHistory();
                } catch(WebServiceException x) {
                    Throwable cause2 = x.getCause();
                        if (cause2 != null && (cause2 instanceof ConnectException || cause2 instanceof SocketTimeoutException)) {
                            try {
                                Thread.sleep(SECONDS*1000);
                                updateStub();
                                continue;

                            } catch(MediatorClientException mcx) {
                                System.out.println(mcx);
                                break;
                            }catch (InterruptedException ix){
                            }
                        }else throw wse;
                    }
        }System.out.println("Servers are unavailable, please try again later...");
        }else throw wse;
    }
        return null;
    }

    @Override
    public void imAlive() {
        port.imAlive(); 
    }

        @Override
    public void updateCart(CartView cart, String idOperation) {
        port.updateCart(cart,idOperation); 
    }
        @Override
    public void updateShopHistory(ShoppingResultView shopResult,String idOperation) {
        port.updateShopHistory(shopResult,idOperation); 
    }
 
}